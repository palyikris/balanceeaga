name: CD

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  FRONTEND_IMAGE: ${{ github.repository }}-frontend
  BACKEND_IMAGE:  ${{ github.repository }}-backend

permissions:
  contents: read
  packages: write

jobs:
  build-and-push-prod-images:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # --- Frontend prod image ---
      - name: Build & Push frontend (prod)
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          target: prod
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}

      # --- Backend prod image ---
      - name: Build & Push backend (prod)
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          target: prod
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}

  prod-smoketest:
    needs: build-and-push-prod-images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare compose override from pushed images
        run: |
          # Ideiglenes compose fájl, ami a frissen pusholt képeket használja.
          cat > docker-compose.ci.override.yml <<'YAML'
          services:
            frontend:
              image: ghcr.io/${{ github.repository }}-frontend:latest
              ports:
                - "5173:80"      # prod image-ben NGINX (80), ha mást használsz, módosítsd
              environment:
                # Ha a prod front más API bázisra mutat, itt állítsd
                VITE_API_BASE: http://localhost:8000

            backend:
              image: ghcr.io/${{ github.repository }}-backend:latest
              ports:
                - "8000:8000"
          YAML

      - name: Launch with compose (PROD images)
        working-directory: ./docker
        run: |
          docker compose -f docker-compose.yml -f ../docker-compose.ci.override.yml up -d
          sleep 10
          docker compose -f docker-compose.yml -f ../docker-compose.ci.override.yml ps

      - name: Smoke checks (PROD images)
        run: |
          # Frontend NGINX (feltételezés: 80-as port -> hoston 5173)
          curl -sS http://localhost:5173 >/dev/null || (echo "Frontend (prod) not responding" && exit 1)

          # Backend health
          if curl -sS http://localhost:8000/healthz >/dev/null; then
            echo "Backend (prod) health OK"
          else
            echo "Figyelem: a backend /health nem elérhető. Ha más endpointod van, módosítsd itt."
          fi

      - name: Logs (if failed)
        if: failure()
        working-directory: ./docker
        run: docker compose -f docker-compose.yml -f ../docker-compose.ci.override.yml logs --no-color

      - name: Tear down
        if: always()
        working-directory: ./docker
        run: docker compose -f docker-compose.yml -f ../docker-compose.ci.override.yml down -v
