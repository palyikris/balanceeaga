name: CD

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

permissions:
  contents: read
  packages: write

jobs:
  build-and-push-prod-images:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push frontend (prod)
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          target: prod
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}-frontend:latest
            ${{ env.REGISTRY }}/${{ github.repository }}-frontend:${{ github.sha }}

      - name: Build & Push backend (prod)
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          target: prod
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}-backend:latest
            ${{ env.REGISTRY }}/${{ github.repository }}-backend:${{ github.sha }}

  prod-smoketest:
    needs: build-and-push-prod-images
    runs-on: ubuntu-latest
    env:
      COMPOSE_FILE: docker/docker-compose.yml

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Write CD override (use GHCR images + ephemeral ports)
        run: |
          mkdir -p docker
          cat > docker/docker-compose.ci.override.yml <<'YAML'
          services:
            frontend:
              image: ghcr.io/${{ github.repository }}-frontend:latest
              # prod image-ben tipikusan NGINX:80 -> host ephemeral
              ports:
                - "0:80"
            backend:
              image: ghcr.io/${{ github.repository }}-backend:latest
              ports:
                - "0:8000"
          YAML

      - name: Launch with compose (PROD images)
        run: |
          docker compose -p "cd_${{ github.run_id }}" -f $COMPOSE_FILE -f docker/docker-compose.ci.override.yml up -d
          docker compose -p "cd_${{ github.run_id }}" -f $COMPOSE_FILE -f docker/docker-compose.ci.override.yml ps
          # kis türelem az első induláshoz
          sleep 5

      - name: Resolve mapped ports
        id: ports
        run: |
          F_HOST_PORT=$(docker compose -p "cd_${{ github.run_id }}" -f $COMPOSE_FILE -f docker/docker-compose.ci.override.yml port frontend 80 | sed 's/.*:\([0-9]\+\)$/\1/')
          B_HOST_PORT=$(docker compose -p "cd_${{ github.run_id }}" -f $COMPOSE_FILE -f docker/docker-compose.ci.override.yml port backend 8000 | sed 's/.*:\([0-9]\+\)$/\1/')
          echo "frontend_port=$F_HOST_PORT" >> $GITHUB_OUTPUT
          echo "backend_port=$B_HOST_PORT" >> $GITHUB_OUTPUT
          echo "Frontend mapped to: $F_HOST_PORT"
          echo "Backend  mapped to: $B_HOST_PORT"

      - name: Smoke checks (retry)
        run: |
          set -e
          FRONT=${{ steps.ports.outputs.frontend_port }}
          BACK=${{ steps.ports.outputs.backend_port }}

          echo "Waiting for PROD images on :$FRONT and :$BACK ..."
          for i in $(seq 1 60); do
            FE=0; BE=0
            curl -fsS "http://127.0.0.1:${FRONT}" >/dev/null && FE=1 || true
            curl -fsS "http://127.0.0.1:${BACK}/health" >/dev/null && BE=1 || true
            if [ "$FE" = "1" ] && [ "$BE" = "1" ]; then
              echo "Both PROD services are up."
              exit 0
            fi
            sleep 2
          done
          echo "PROD services did not become healthy in time."
          exit 1

      - name: Logs (if failed)
        if: failure()
        run: |
          docker compose -p "cd_${{ github.run_id }}" -f $COMPOSE_FILE -f docker/docker-compose.ci.override.yml logs --no-color

      - name: Tear down
        if: always()
        run: |
          docker compose -p "cd_${{ github.run_id }}" -f $COMPOSE_FILE -f docker/docker-compose.ci.override.yml down -v
