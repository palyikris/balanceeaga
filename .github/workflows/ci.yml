name: CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  compose-up-smoketest:
    runs-on: ubuntu-latest
    env:
      COMPOSE_FILE: docker/docker-compose.yml

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Write CI override (ephemeral ports + vite host)
        run: |
          mkdir -p docker
          cat > docker/ci.override.yml <<'YAML'
          services:
            frontend:
              # Ha a dev target 5173-on fut a konténeren belül, ne kössünk fix host portot.
              ports:
                - "0:5173"
              environment:
                # Vite-nál fontos, hogy a konténeren kívülről is elérhető legyen:
                VITE_HOST: 0.0.0.0
                HOST: 0.0.0.0
            backend:
              # Uvicorn/FastAPI dev szerver tipikusan :8000
              ports:
                - "0:8000"
          YAML

      - name: Compose up (dev) with overrides
        run: |
          docker compose -p "ci_${{ github.run_id }}" -f $COMPOSE_FILE -f docker/ci.override.yml up -d --build
          docker compose -p "ci_${{ github.run_id }}" -f $COMPOSE_FILE -f docker/ci.override.yml ps

      - name: Resolve mapped ports
        id: ports
        run: |
          # Frontend: próbáljuk a konténeren belüli 5173-at megtalálni
          F_HOST_PORT=$(docker compose -p "ci_${{ github.run_id }}" -f $COMPOSE_FILE -f docker/ci.override.yml port frontend 5173 | sed 's/.*:\([0-9]\+\)$/\1/')
          # Backend: 8000
          B_HOST_PORT=$(docker compose -p "ci_${{ github.run_id }}" -f $COMPOSE_FILE -f docker/ci.override.yml port backend 8000 | sed 's/.*:\([0-9]\+\)$/\1/')
          echo "frontend_port=$F_HOST_PORT" >> $GITHUB_OUTPUT
          echo "backend_port=$B_HOST_PORT" >> $GITHUB_OUTPUT
          echo "Frontend mapped to: $F_HOST_PORT"
          echo "Backend  mapped to: $B_HOST_PORT"

      - name: Wait for services (retry with backoff)
        run: |
          set -e
          FRONT=${{ steps.ports.outputs.frontend_port }}
          BACK=${{ steps.ports.outputs.backend_port }}

          echo "Waiting for frontend on :$FRONT and backend on :$BACK ..."
          # 60x próbálkozás ~120s
          for i in $(seq 1 60); do
            FE=0; BE=0
            curl -fsS "http://127.0.0.1:${FRONT}" >/dev/null && FE=1 || true
            curl -fsS "http://127.0.0.1:${BACK}/health" >/dev/null && BE=1 || true
            if [ "$FE" = "1" ] && [ "$BE" = "1" ]; then
              echo "Both services are up."
              exit 0
            fi
            sleep 2
          done
          echo "Services did not become healthy in time."
          exit 1

      - name: Logs (if failed)
        if: failure()
        run: |
          docker compose -p "ci_${{ github.run_id }}" -f $COMPOSE_FILE -f docker/ci.override.yml logs --no-color

      - name: Tear down
        if: always()
        run: |
          docker compose -p "ci_${{ github.run_id }}" -f $COMPOSE_FILE -f docker/ci.override.yml down -v
